<?php
$matches = json_decode(file_get_contents('merged.json'), true)['matches'];

$team1 = $_POST['team1'];
$team2 = $_POST['team2'];

if (empty($team1) || empty($team2)) {
    $error = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥.";
    include 'index.php';
    exit;
}

$teams = file('teams.txt', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

if (!in_array($team1, $teams) || !in_array($team2, $teams)) {
    $error = "–û–¥–Ω–∞ –∏–ª–∏ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ.";
    include 'index.php';
    exit;
}

$commentatorPhrases = [
    "–≠—Ç–æ –±—É–¥–µ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∞—Ç—á! –û–±–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ—Ç–ª–∏—á–Ω—É—é —Ñ–æ—Ä–º—É.",
    "–°—É–¥—è –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –Ω–∞—Å –∂–¥–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–∞—è –∏–≥—Ä–∞.",
    "–û–∂–∏–¥–∞–µ–º –º–Ω–æ–≥–æ –≥–æ–ª–æ–≤ –∏ —è—Ä–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤!",
    "–ö–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ö–æ–¥—è—Ç –∫ –º–∞—Ç—á—É —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞–∫—Ç–∏–∫–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ.",
    "–≠—Ç–æ—Ç –º–∞—Ç—á –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ä–µ—à–∞—é—â–∏–º –¥–ª—è –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥.",
    "–ó—Ä–∏—Ç–µ–ª–µ–π –∂–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∞—è —Ñ—É—Ç–±–æ–ª—å–Ω–∞—è –±–∏—Ç–≤–∞!",
    "–û–±–µ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ç–æ–≤—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ, –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–Ω—ã.",
    "–ú–∞—Ç—á –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å –∑—Ä–µ–ª–∏—â–Ω—ã–º –∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º.",
    "–°—É–¥—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–≥—Ä–∞–º, –Ω–∞—Å –∂–¥–µ—Ç –º–Ω–æ–≥–æ —Å—é—Ä–ø—Ä–∏–∑–æ–≤.",
    "–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–±–µ–¥—É!"
];

function getRandomCommentatorPhrase($phrases) {
    return $phrases[array_rand($phrases)];
}

function predictMatch($team1, $team2, $matches) {
    $matchResults = analyzeMatchResultsByHalf($matches);
    $teamStats = calculateTeamStatsByHalf($matchResults);

    if (isset($teamStats[$team1]) && isset($teamStats[$team2])) {
        $stats1 = $teamStats[$team1];
        $stats2 = $teamStats[$team2];

        $team1AvgGoals = $stats1['avgTh'] + $stats1['avgTf'];
        $team2AvgGoals = $stats2['avgTh'] + $stats2['avgTf'];

        $predictedScore = [
            round($team1AvgGoals),
            round($team2AvgGoals)
        ];

        $outcome = ($predictedScore[0] > $predictedScore[1]) ? "–ü–æ–±–µ–¥–∞ {$team1} üèÜ" :
                   (($predictedScore[0] < $predictedScore[1]) ? "–ü–æ–±–µ–¥–∞ {$team2} üèÜ" : "–ù–∏—á—å—è ü§ù");

        $totalGoals = $predictedScore[0] + $predictedScore[1];

        $total1_5 = ($totalGoals > 1.5) ? "–ë–æ–ª—å—à–µ 1.5 ‚úÖ" : "–ú–µ–Ω—å—à–µ 1.5 ‚ùå";
        $total1_5_class = ($totalGoals > 1.5) ? "success" : "danger";

        $total2_5 = ($totalGoals > 2.5) ? "–ë–æ–ª—å—à–µ 2.5 ‚úÖ" : "–ú–µ–Ω—å—à–µ 2.5 ‚ùå";
        $total2_5_class = ($totalGoals > 2.5) ? "success" : "danger";

        $team1_total_0_5 = ($predictedScore[0] > 0.5) ? "–ë–æ–ª—å—à–µ 0.5 ‚úÖ" : "–ú–µ–Ω—å—à–µ 0.5 ‚ùå";
        $team1_total_0_5_class = ($predictedScore[0] > 0.5) ? "success" : "danger";

        $team2_total_0_5 = ($predictedScore[1] > 0.5) ? "–ë–æ–ª—å—à–µ 0.5 ‚úÖ" : "–ú–µ–Ω—å—à–µ 0.5 ‚ùå";
        $team2_total_0_5_class = ($predictedScore[1] > 0.5) ? "success" : "danger";

        return [
            'predictedScore' => $predictedScore,
            'outcome' => $outcome,
            'total1_5' => $total1_5,
            'total2_5' => $total2_5,
            'team1_total_0_5' => $team1_total_0_5,
            'team2_total_0_5' => $team2_total_0_5,
            'total1_5_class' => $total1_5_class,
            'total2_5_class' => $total2_5_class,
            'team1_total_0_5_class' => $team1_total_0_5_class,
            'team2_total_0_5_class' => $team2_total_0_5_class,
            'commentatorPhrase' => getRandomCommentatorPhrase($commentatorPhrases)
        ];
    } else {
        return null;
    }
}

function analyzeMatchResultsByHalf($matches) {
    return array_map(function($match) {
        $scoreHt = $match['score']['ht'] ?? [0, 0];
        $scoreFt = $match['score']['ft'] ?? [0, 0];

        return [
            'team1' => $match['team1'],
            'team2' => $match['team2'],
            'th' => $scoreHt[0],
            'tf' => $scoreFt[0] - $scoreHt[0]
        ];
    }, $matches);
}

function calculateTeamStatsByHalf($matches) {
    $teamStats = [];

    foreach ($matches as $match) {
        $team1 = $match['team1'];
        $team2 = $match['team2'];
        $th = $match['th'];
        $tf = $match['tf'];

        if (!isset($teamStats[$team1])) {
            $teamStats[$team1] = ['totalTh' => 0, 'totalTf' => 0, 'matchesPlayed' => 0];
        }
        $teamStats[$team1]['totalTh'] += $th;
        $teamStats[$team1]['totalTf'] += $tf;
        $teamStats[$team1]['matchesPlayed'] += 1;

        if (!isset($teamStats[$team2])) {
            $teamStats[$team2] = ['totalTh' => 0, 'totalTf' => 0, 'matchesPlayed' => 0];
        }
        $teamStats[$team2]['totalTh'] += $th;
        $teamStats[$team2]['totalTf'] += $tf;
        $teamStats[$team2]['matchesPlayed'] += 1;
    }

    foreach ($teamStats as &$stats) {
        $stats['avgTh'] = $stats['totalTh'] / $stats['matchesPlayed'];
        $stats['avgTf'] = $stats['totalTf'] / $stats['matchesPlayed'];
    }

    return $teamStats;
}

$prediction = predictMatch($team1, $team2, $matches);

if ($prediction) {
    include 'index.php';
} else {
    $error = "–û–¥–Ω–∞ –∏–ª–∏ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö.";
    include 'index.php';
}